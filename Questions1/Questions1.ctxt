#BlueJ class context
comment0.target=Questions1
comment0.text=Questions1
comment1.params=list1\ list2
comment1.target=java.util.List\ union(java.util.List,\ java.util.List)
comment1.text=\n\ union\ is\ passed\ two\ lists,\ list1\ and\ list2.\n\ It\ can\ assume\ that\ there\ are\ no\ duplicates\ in\ list1\ or\ list2.\n\ It\ should\ return\ a\ new\ list\ which\ contains\ every\ Thing\ that\ is\ in\n\ list1\ or\ list2\ or\ both,\ but\ should\ not\ contain\ any\ duplicates.\n
comment10.params=
comment10.target=void\ testHasSublist()
comment10.text=Test\ the\ hasSublist\ method
comment11.params=
comment11.target=java.util.List\ askThingList()
comment11.text=\ Asks\ user\ for\ a\ string\ of\ letters,\ and\ constructs\n\ a\ List\ of\ Things,\ with\ each\ letter\ in\ the\ string\ as\ the\ name\ of\ a\ Thing\n
comment12.params=
comment12.target=void\ checkCompile()
comment2.params=list\ start\ nth
comment2.target=java.util.List\ everyNth(java.util.List,\ int,\ int)
comment2.text=\n\ everyNth\ is\ passed\ a\ list\ of\ Things,\ and\ two\ integers\ (start\ and\ nth)\n\ It\ returns\ a\ new\ list\ consisting\ of\ every\ nth\ thing\ in\ the\ list,\ begining\n\ at\ item\ at\ index\ start.\n\ For\ example,\ if\ myList\ contains\n\ \ \ \ \ {a,\ b,\ c,\ d,\ e,\ f,\ g,\ h}\n\ \ everyNth(myList,\ 3,\ 2)\n\ \ should\ return\ the\ list\n\ \ \ \ \ {d,\ f,\ h},\n\ \ since\ d\ is\ the\ item\ at\ index\ 3,\ and\ f\ and\ h\ are\ every\ 2nd\ item\ after\ d.\n\ If\ start\ is\ not\ the\ index\ of\ an\ item\ in\ the\ list,\ everyNth\ should\ return\ an\ empty\ list.\n\ If\ nth\ is\ 0\ or\ negative,\ then\ everyNth\ should\ return\ a\ list\ with\ only\ the\ item\ at\ start\n
comment3.params=list\ n
comment3.target=void\ rotateRight(java.util.List,\ int)
comment3.text=\n\ Rotates\ the\ values\ in\ the\ list\ n\ steps\ to\ the\ right\n\ by\ moving\ each\ item\ n\ steps\ to\ the\ right,\ and\ bringing\ items\ that\n\ \ "fall\ off\ the\ end"\ \ to\ the\ front\ of\ the\ list.\n\ If\ n\ is\ negative,\ it\ should\ rotate\ the\ list\ -n\ steps\ to\ the\ left\n\ For\ example,\ if\ myList\ contains\n\ \ \ \ \ {a,\ b,\ c,\ d,\ e,\ f,\ g,\ h}\n\ \ rotateRight(myList,\ 3)\n\ \ should\ result\ in\ myList\ being\ changed\ to\ contain\n\ \ \ \ \ {f,\ g,\ h,\ a,\ b,\ c,\ d,\ e}\n\n\ \ rotateRight(myList,\ 9)\n\ \ should\ result\ in\ myList\ being\ changed\ to\ contain\n\ \ \ \ \ {h,\ a,\ b,\ c,\ d,\ e,\ f,\ g}\n\ \ (8\ steps\ will\ return\ the\ list\ to\ its\ original\ order)\n\n\ \ rotateRight(myList,\ -2)\n\ \ should\ result\ in\ myList\ being\ changed\ to\ contain\n\ \ \ \ \ {c,\ d,\ e,\ f,\ g,\ h,\ a,\ b}\n
comment4.params=list1\ list2
comment4.target=boolean\ hasSublist(java.util.List,\ java.util.List)
comment4.text=\n\ Checks\ whether\ list2\ is\ a\ sublist\ of\ list1,\n\ list2\ is\ a\ sublist\ of\ list1,\ if\ you\ could\ remove\ items\ from\ the\ front\ and/or\n\ \ \ end\ of\ list1\ to\ make\ it\ the\ same\ as\ list2\n\ For\ example,\n\ \ \ \ \ \n\ \ \ \ hasSublist({a,\ b,\ c,\ d,\ e,\ f,\ g,\ h},\ {c,\ d,\ e,\ f,\ g})\ is\ true\n\ \ \ \ hasSublist({a,\ b,\ c,\ d,\ e,\ f,\ g,\ h},\ {a,\ c,\ e,\ g})\ is\ not\ true\n\ \ \ \ \ \ -\ the\ values\ in\ list2\ are\ all\ in\ list1,\ but\ not\ in\ sequence.\n\ \ \ \ hasSublist({a,\ b,\ c},\ {a,\ b,\ c})\ is\ NOT\ true\n\ \ \ \ \ \ -\ list2\ must\ be\ smaller\ than\ list1\n\ An\ empty\ list\ is\ a\ sublist\ of\ any\ list\ (except\ an\ empty\ list).\n
comment5.params=args
comment5.target=void\ main(java.lang.String[])
comment6.params=
comment6.target=void\ setupGUI()
comment7.params=
comment7.target=void\ testUnion()
comment7.text=Test\ the\ union\ method
comment8.params=
comment8.target=void\ testEveryNth()
comment8.text=Test\ the\ everyNth\ method
comment9.params=
comment9.target=void\ testRotateRight()
comment9.text=Test\ the\ rotateRight\ method
numComments=13
