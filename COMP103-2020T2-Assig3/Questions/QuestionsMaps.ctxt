#BlueJ class context
comment0.target=QuestionsMaps
comment0.text=\n\ QuestionsMaps\:\ \n\ Automarked\ questions\ about\ Maps\n
comment1.params=map\ set
comment1.target=java.util.List\ lookupAll(java.util.Map,\ java.util.Set)
comment1.text=\n\ lookupAll\ is\ passed\ a\ Map\ (from\ Strings\ to\ Things)\ and\ a\ Set\ of\ Strings.\n\ It\ should\ return\ a\ new\ List\ containing\ every\n\ \ Thing\ that\ is\ associated\ (according\ to\ the\ map)\ with\ a\ string\ in\ the\ set,\ \n\ If\ a\ String\ in\ the\ set\ is\ not\ in\ the\ map,\ lookupAll\ should\ not\ add\n\ \ \ a\ value\ to\ the\ list.\n\ If\ two\ different\ Strings\ are\ mapped\ to\ the\ same\ Thing,\ then\n\ \ the\ returned\ list\ should\ contain\ the\ Thing\ twice.\n\ For\ example,\n\ \ \ if\ the\ map\ contains\ the\ key\=value\ pairs\n\ \ \ \ \ {"a"\=X,\ "b"\=U,\ "d"\=W,\ "e"\=U,\ "f"\=Z}\n\ \ \ and\ the\ set\ contains\ {"a",\ "b",\ "c",\ "e"}\n\ \ \ then\ lookupAllInLists\ should\ return\ the\ list\n\ \ \ \ \ [X,\ U,\ U],\n\ The\ order\ of\ Things\ in\ the\ returned\ list\ does\ not\ matter.\n\ If\ the\ map\ and/or\ the\ set\ are\ null,\ lookupAll\ should\ return\ an\ empty\ list\n\ lookupAll\ should\ not\ modify\ the\ map.\n
comment10.params=
comment10.target=void\ testTransitiveLookup()
comment10.text=\ Test\ the\ transitiveLookup\ method\n\ \ Example\ maps\ were\ \ \ a\=XYZ\ b\=UVU\ c\=VWXZ\ \ and\ \ Y\=M\ U\=P\ W\=Q\ Z\=N\ T\=M\n
comment11.params=
comment11.target=void\ testInverseLookup()
comment11.text=\ Test\ the\ inverseLookup\ method\n\ \ Example\ maps\ were\ \ a\=X\ b\=U\ c\=V\ d\=U\ e\=Y\ f\=Z\ \ and\ \ W\=M\ U\=P\ X\=N\ V\=Q\ Y\=N\n
comment12.params=
comment12.target=void\ testConstructCounts()
comment12.text=Test\ the\ constructCounts\ method
comment13.params=prompt
comment13.target=java.util.List\ askListThing(java.lang.String)
comment13.text=\n\ Asks\ user\ for\ a\ string\ of\ letters,\ and\ constructs\n\ a\ List\ of\ Things,\ with\ each\ letter\ in\ the\ string\ as\ the\ name\ of\ a\ Thing\n
comment14.params=prompt
comment14.target=java.util.Set\ askSetString(java.lang.String)
comment14.text=\n\ Asks\ user\ for\ a\ token,\ and\ constructs\n\ a\ Set\ of\ Strings\ consisting\ of\ each\ letter\ in\ the\ token\ \n
comment15.params=prompt
comment15.target=java.util.Map\ askMapST(java.lang.String)
comment15.text=\n\ Asks\ user\ for\ a\ map\ from\ Strings\ to\ Things.\n\ Reads\ the\ key->value\ pairs\ in\ the\ form\ \ \ a\=x\ b\=y\ c\=z\n\ Returns\ the\ Map\n
comment16.params=prompt
comment16.target=java.util.Map\ askMapSLT(java.lang.String)
comment16.text=\n\ Asks\ user\ for\ a\ map\ from\ Strings\ to\ Lists\ of\ Things.\n\ Reads\ the\ key->value\ pairs\ in\ the\ form\ \ \ a\=xyz\ b\=yu\ c\=uvwxy\n\ Returns\ the\ Map\n
comment17.params=prompt
comment17.target=java.util.Map\ askMapTI(java.lang.String)
comment17.text=\ \ \n\ Asks\ user\ for\ a\ map\ from\ Things\ to\ Items.\n\ Reads\ the\ key->value\ pairs\ in\ the\ form\ \ \ x\=m\ y\=n\ z\=p\n\ Returns\ the\ Map\n
comment18.params=
comment18.target=void\ initMapST()
comment18.text=Initialise\ mapST\ with\ the\ map\ in\ the\ comment\ for\ lookupAll()
comment19.params=
comment19.target=void\ initMapSLT()
comment19.text=Initialise\ mapSLT\ with\ the\ map\ in\ the\ comment\ for\ lookupAllInLists()
comment2.params=map\ set
comment2.target=java.util.List\ lookupAllInLists(java.util.Map,\ java.util.Set)
comment2.text=\n\ lookupAllInLists\ is\ passed\ a\ map\ (from\ Strings\ to\ Lists\ of\ Things)\ and\n\ \ a\ Set\ of\ Strings.\n\ It\ should\ return\ a\ new\ List\ containing\ every\ Thing\ that\ is\n\ \ in\ a\ List\ associated\ with\ a\ string\ in\ the\ Set.\n\ The\ returned\ List\ should\ not\ contain\ any\ duplicates.\n\ For\ example,\n\ \ \ if\ the\ map\ contains\n\ \ \ \ \ {"a"\=[X,\ Y,\ Z],\ "b"\=[U,V],\ "c"\=[V,\ W,\ X]}\n\ \ \ and\ the\ set\ contains\ {"a","c"}\n\ \ \ then\ lookupAllInLists\ should\ return\ the\ list\n\ \ \ \ \ [X,\ Y,\ Z,\ V,\ W],\n\ If\ the\ map\ and/or\ the\ set\ are\ null,\ lookupAllInLists\ should\ return\ an\ empty\ list\n\ The\ order\ of\ Things\ in\ the\ returned\ List\ does\ not\ matter.\n\ If\ the\ map\ and/or\ the\ set\ are\ null,\ lookupAll\ should\ return\ an\ empty\ list\n\ lookupAllInLists\ should\ not\ modify\ the\ map\ or\ the\ set.\n
comment20.params=
comment20.target=void\ initMapTI()
comment20.text=Initialise\ mapTI\ with\ the\ map\ in\ the\ comment\ for\ transitiveLookup()
comment21.params=
comment21.target=void\ reportMaps()
comment22.params=
comment22.target=void\ checkCompile()
comment3.params=map1\ map2\ string
comment3.target=java.util.Set\ transitiveLookup(java.util.Map,\ java.util.Map,\ java.lang.String)
comment3.text=\n\ transitiveLookup\ is\ passed\ two\ maps\n\ \ a\ map\ from\ Strings\ to\ Lists\ of\ Things\n\ \ a\ map\ from\ Things\ to\ Items)\n\ \ and\ a\ String.\n\ It\ should\ look\ up\ the\ String\ in\ the\ first\ map.\n\ If\ there\ are\ any\ associated\ Things,\ then\ it\ should\ look\ up\ each\ Thing\n\ \ in\ the\ second\ map\ to\ find\ associated\ items.\n\ It\ should\ return\ a\ Set\ of\ all\ the\ associated\ Items.\ \n\ It\ should\ look\ up\ the\ String\ in\ the\ first\ map,\ and\ then\ look\ up\n\ each\ of\ the\ associated\ Things\ (if\ any)\ in\ the\ second\ map,\ and\ return\ a\ Set\ of\n\ all\ the\ associated\ Items.\ \n\ For\ example,\n\ \ \ if\ map1\ contains\n\ \ \ \ \ {"a"\=[X,Y,Z],\ "b"\=[U,V,U],\ "c"\=[V,W,X,Z]}\n\ \ \ and\ map2\ contains\n\ \ \ \ \ {Y\=M,\ U\=P,\ W\=Q,\ Z\=N,\ T\=M}\n\ \ \ transitiveLookup(map1,\ map2,\ "a")\ should\ return\ {M,\ N}\n\ \ \ transitiveLookup(map1,\ map2,\ "b")\ should\ return\ {P}\n\ \ \ transitiveLookup(map1,\ map2,\ "d")\ should\ return\ {}\n\ If\ either\ of\ the\ maps\ or\ the\ string\ are\ null,\ transitiveLookup\ should\ return\ an\ empty\ set\n\ transitiveLookup\ should\ not\ modify\ the\ maps.\n
comment4.params=map1\ map2\ item
comment4.target=java.util.Set\ inverseLookup(java.util.Map,\ java.util.Map,\ Item)
comment4.text=\n\ inverseLookup\ is\ passed\ two\ maps\ (one\ from\ Strings\ to\ Things\n\ and\ the\ other\ from\ Things\ to\ Items)\ and\ an\ Item.\n\ It\ should\ return\ a\ Set\ of\ all\ the\ Strings\ that\ are\ keys\ in\ the\ first\ map\n\ associated\ with\ Things\ that\ are\ keys\ in\ the\ second\ map\ associated\ with\ the\ Item.\n\ For\ example,\n\ \ \ if\ map1\ contains\n\ \ \ \ \ {"a"\=X,\ "b"\=U,\ "c"\=V,\ "d"\=U,\ "e"\=Y,\ "f"\=Z}\n\ \ \ and\ map2\ contains\n\ \ \ \ \ {W\=M,\ U\=P,\ X\=N,\ V\=Q,\ Y\=N}\n\ \ \ inverseLookup(map1,\ map2,\ Q)\ should\ return\ [c]\n\ \ \ inverseLookup(map1,\ map2,\ P)\ should\ return\ [b,\ d]\n\ \ \ inverseLookup(map1,\ map2,\ N)\ should\ return\ [a,\ e]\n\ If\ either\ of\ the\ maps\ or\ the\ Item\ are\ null,\ inverseLookup\ should\ return\ an\ empty\ set\n\ inverseLookup\ should\ not\ modify\ the\ maps.\n
comment5.params=list
comment5.target=java.util.Map\ constructCounts(java.util.List)
comment5.text=\n\ constructCounts\ is\ passed\ a\ List\ of\ Things\ which\ may\ contain\ many\ duplicates.\n\ constructCounts\ should\ return\ a\ Map\ from\ Thing\ to\ Integer\ that\ contains\ the\ counts\n\ of\ every\ distinct\ Thing\ in\ the\ List.\n\ For\ example,\n\ \ \ \ if\ the\ list\ has\ [A,\ B,\ A,\ C,\ A,\ B,\ A,\ D,\ A]\n\ \ \ \ then\ constructCounts\ should\ return\ the\ Map\n\ \ \ \ {A\=5,\ B\=2,\ C\=1,\ D\=1}\n\ If\ the\ List\ is\ null,\ constructCounts\ should\ return\ null\n\ constructCounts\ should\ not\ modify\ the\ list.\n
comment6.params=args
comment6.target=void\ main(java.lang.String[])
comment7.params=
comment7.target=void\ setupGUI()
comment8.params=
comment8.target=void\ testLookupAll()
comment8.text=Test\ the\ lookupAll\ method
comment9.params=
comment9.target=void\ testLookupAllInLists()
comment9.text=Test\ the\ lookupAllInLists\ method
numComments=23
